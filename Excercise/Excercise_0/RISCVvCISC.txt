RISC (Reduce Instruction Set Computer): Tập trung vào tập lệnh nhỏ và tối ưu hóa các câu lệnh, đơn giản và thực hiện chỉ trong 1 chu kì clock của hệ thống.
 - Chương trình dài và cần nhiều lệnh hơn.
 - tập trung vào tốc độ xử lí và sức mạnh.
 - cần nhiều thanh ghi.
 - processor cần dùng thêm cache để giảm thời gian truy cập vào bộ nhớ.
 - Thực hiện nhiều câu lệnh trong 1 chu kì CLK
 - chỉ có lệnh load mới có thể truy câp vào memory, còn lại là được lưu ở thanh ghi
 - dùng pipelining để tăng tốc độ thực hiện câu lệnh.
 - cache đóng vai trò như bộ nhớ tạm thời.
 - độ dài lệnh là cố định, nhưng có khả năng mở rộng và có thể chứa lệnh lớn hơn.
 - dựa trên nền cấu trúc thanh ghi (lưu trữ dữ liệu trong register thay vì processor).
 - cần ít chu kì hơn để thực hiện nhiều lệnh.
 - RISC dựa trên cấu trúc tải và lưu trữ.
 DISADV;
 - tập lệnh phức tạp thì thực hiện khó hơn.
 - không dùng memory to memory như CISC.
 - chương trình dài hơn.


 EXAM: c = a + b
 LOAD R1,A
 LOAD R2,B
 ADD R3,R1,R2
 STORE C,R3 

CISC (Complex Instruction Set Computer): Câu lệnh đơn giản nhưng cần nhiều thao tác để thực hiện, ít lệnh và ngắn hơn RISC.
- câu lệnh phức tạp và cần nhiều bước hơn, nhiều chu kì xung clk hơn để thực hiện lệnh.
- câu lệnh thực hiện trực tiếp mà không cần memory, giảm số lần access vào memory.
- bộ nhớ có thể giao tiếp trực tiếp với nhau, dữ liệu được truyền trực tiếp memory to memory, tăng độ tin cậy vào dữ liệu hơn.
- CISC phù hợp đa dạng nhiệm vụ cần xử lí.
- độ dài lệnh phụ thuộc vào độ phức tạp của phép toán cần xử lí;
- câu lệnh đa dạng và linh hoạt hơn RISC;
- code nhỏ và dễ hơn RISC;
- tối ưu hóa khả năng sử dụng bộ nhớ;
- khả năng tối ưu compiler bị giới hạn;
- sản xuất chip cấu trúc CISC phức tạp hơn RISC;

EXAM: c = a + b
ADD A,B,C

Giống: Đều là ISA (Instruction Set Architecture), kiến trúc tập lệnh cho máy tính ()